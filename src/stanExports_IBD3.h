// Generated by rstantools.  Do not edit by hand.

/*
    ProbBreed is free software: you can redistribute it and/or modify
    it under the terms of the GNU General Public License as published by
    the Free Software Foundation, either version 3 of the License, or
    (at your option) any later version.

    ProbBreed is distributed in the hope that it will be useful,
    but WITHOUT ANY WARRANTY; without even the implied warranty of
    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
    GNU General Public License for more details.

    You should have received a copy of the GNU General Public License
    along with ProbBreed.  If not, see <http://www.gnu.org/licenses/>.
*/
#ifndef MODELS_HPP
#define MODELS_HPP
#define STAN__SERVICES__COMMAND_HPP
#ifndef USE_STANC3
#define USE_STANC3
#endif
#include <rstan/rstaninc.hpp>
// Code generated by stanc v2.32.2
#include <stan/model/model_header.hpp>
namespace model_IBD3_namespace {
using stan::model::model_base_crtp;
using namespace stan::math;
stan::math::profile_map profiles__;
static constexpr std::array<const char*, 94> locations_array__ =
  {" (found before start of program)",
  " (in 'string', line 23, column 4 to column 26)",
  " (in 'string', line 24, column 4 to column 28)",
  " (in 'string', line 25, column 4 to column 23)",
  " (in 'string', line 26, column 4 to column 12)",
  " (in 'string', line 27, column 4 to column 22)",
  " (in 'string', line 28, column 4 to column 17)",
  " (in 'string', line 29, column 4 to column 22)",
  " (in 'string', line 30, column 4 to column 17)",
  " (in 'string', line 31, column 4 to column 22)",
  " (in 'string', line 32, column 4 to column 17)",
  " (in 'string', line 33, column 4 to column 22)",
  " (in 'string', line 34, column 4 to column 17)",
  " (in 'string', line 35, column 4 to column 23)",
  " (in 'string', line 36, column 4 to column 18)",
  " (in 'string', line 37, column 4 to column 22)",
  " (in 'string', line 38, column 4 to column 17)",
  " (in 'string', line 39, column 4 to column 23)",
  " (in 'string', line 40, column 4 to column 18)",
  " (in 'string', line 41, column 4 to column 18)",
  " (in 'string', line 44, column 4 to column 26)",
  " (in 'string', line 45, column 4 to column 33)",
  " (in 'string', line 72, column 4 to column 23)",
  " (in 'string', line 46, column 4 to column 72)",
  " (in 'string', line 47, column 4 to column 40)",
  " (in 'string', line 74, column 6 to column 71)",
  " (in 'string', line 73, column 21 to line 75, column 7)",
  " (in 'string', line 73, column 6 to line 75, column 7)",
  " (in 'string', line 50, column 4 to column 29)",
  " (in 'string', line 51, column 4 to column 31)",
  " (in 'string', line 52, column 4 to column 26)",
  " (in 'string', line 53, column 4 to column 25)",
  " (in 'string', line 54, column 4 to column 25)",
  " (in 'string', line 55, column 4 to column 23)",
  " (in 'string', line 56, column 4 to column 25)",
  " (in 'string', line 57, column 4 to column 23)",
  " (in 'string', line 58, column 4 to column 25)",
  " (in 'string', line 59, column 4 to column 23)",
  " (in 'string', line 60, column 4 to column 25)",
  " (in 'string', line 61, column 4 to column 23)",
  " (in 'string', line 62, column 4 to column 26)",
  " (in 'string', line 63, column 4 to column 25)",
  " (in 'string', line 64, column 4 to column 25)",
  " (in 'string', line 65, column 4 to column 23)",
  " (in 'string', line 66, column 4 to column 26)",
  " (in 'string', line 67, column 4 to column 25)",
  " (in 'string', line 68, column 4 to column 39)",
  " (in 'string', line 69, column 4 to column 43)",
  " (in 'string', line 3, column 4 to column 19)",
  " (in 'string', line 4, column 4 to column 20)",
  " (in 'string', line 5, column 4 to column 20)",
  " (in 'string', line 6, column 4 to column 20)",
  " (in 'string', line 7, column 4 to column 20)",
  " (in 'string', line 8, column 4 to column 20)",
  " (in 'string', line 9, column 4 to column 20)",
  " (in 'string', line 10, column 4 to column 20)",
  " (in 'string', line 11, column 11 to column 12)",
  " (in 'string', line 11, column 14 to column 16)",
  " (in 'string', line 11, column 4 to column 21)",
  " (in 'string', line 12, column 11 to column 12)",
  " (in 'string', line 12, column 14 to column 16)",
  " (in 'string', line 12, column 4 to column 21)",
  " (in 'string', line 13, column 11 to column 12)",
  " (in 'string', line 13, column 14 to column 16)",
  " (in 'string', line 13, column 4 to column 21)",
  " (in 'string', line 14, column 11 to column 12)",
  " (in 'string', line 14, column 14 to column 16)",
  " (in 'string', line 14, column 4 to column 21)",
  " (in 'string', line 15, column 11 to column 12)",
  " (in 'string', line 15, column 14 to column 16)",
  " (in 'string', line 15, column 4 to column 21)",
  " (in 'string', line 16, column 11 to column 12)",
  " (in 'string', line 16, column 14 to column 16)",
  " (in 'string', line 16, column 4 to column 21)",
  " (in 'string', line 17, column 11 to column 12)",
  " (in 'string', line 17, column 14 to column 16)",
  " (in 'string', line 17, column 4 to column 21)",
  " (in 'string', line 18, column 11 to column 12)",
  " (in 'string', line 18, column 4 to column 14)",
  " (in 'string', line 19, column 4 to column 13)",
  " (in 'string', line 20, column 13 to column 14)",
  " (in 'string', line 20, column 3 to column 16)",
  " (in 'string', line 24, column 24 to column 26)",
  " (in 'string', line 28, column 11 to column 13)",
  " (in 'string', line 30, column 11 to column 13)",
  " (in 'string', line 32, column 11 to column 13)",
  " (in 'string', line 34, column 11 to column 13)",
  " (in 'string', line 36, column 11 to column 13)",
  " (in 'string', line 38, column 11 to column 13)",
  " (in 'string', line 40, column 11 to column 13)",
  " (in 'string', line 41, column 15 to column 16)",
  " (in 'string', line 44, column 11 to column 12)",
  " (in 'string', line 45, column 20 to column 21)",
  " (in 'string', line 72, column 20 to column 21)"};
#include <stan_meta_header.hpp>
class model_IBD3 final : public model_base_crtp<model_IBD3> {
private:
  int n;
  int p1;
  int p2;
  int p3;
  int p4;
  int p5;
  int p8;
  int p9;
  Eigen::Matrix<double,-1,-1> Z1_data__;
  Eigen::Matrix<double,-1,-1> Z2_data__;
  Eigen::Matrix<double,-1,-1> Z3_data__;
  Eigen::Matrix<double,-1,-1> Z4_data__;
  Eigen::Matrix<double,-1,-1> Z5_data__;
  Eigen::Matrix<double,-1,-1> Z8_data__;
  Eigen::Matrix<double,-1,-1> Z9_data__;
  std::vector<double> y;
  double phi;
  std::vector<int> index;
  Eigen::Map<Eigen::Matrix<double,-1,-1>> Z1{nullptr, 0, 0};
  Eigen::Map<Eigen::Matrix<double,-1,-1>> Z2{nullptr, 0, 0};
  Eigen::Map<Eigen::Matrix<double,-1,-1>> Z3{nullptr, 0, 0};
  Eigen::Map<Eigen::Matrix<double,-1,-1>> Z4{nullptr, 0, 0};
  Eigen::Map<Eigen::Matrix<double,-1,-1>> Z5{nullptr, 0, 0};
  Eigen::Map<Eigen::Matrix<double,-1,-1>> Z8{nullptr, 0, 0};
  Eigen::Map<Eigen::Matrix<double,-1,-1>> Z9{nullptr, 0, 0};
public:
  ~model_IBD3() {}
  model_IBD3(stan::io::var_context& context__, unsigned int
             random_seed__ = 0, std::ostream* pstream__ = nullptr)
      : model_base_crtp(0) {
    int current_statement__ = 0;
    using local_scalar_t__ = double;
    boost::ecuyer1988 base_rng__ =
      stan::services::util::create_rng(random_seed__, 0);
    // suppress unused var warning
    (void) base_rng__;
    static constexpr const char* function__ =
      "model_IBD3_namespace::model_IBD3";
    // suppress unused var warning
    (void) function__;
    local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
    // suppress unused var warning
    (void) DUMMY_VAR__;
    try {
      int pos__ = std::numeric_limits<int>::min();
      pos__ = 1;
      current_statement__ = 48;
      context__.validate_dims("data initialization", "n", "int",
        std::vector<size_t>{});
      n = std::numeric_limits<int>::min();
      current_statement__ = 48;
      n = context__.vals_i("n")[(1 - 1)];
      current_statement__ = 48;
      stan::math::check_greater_or_equal(function__, "n", n, 1);
      current_statement__ = 49;
      context__.validate_dims("data initialization", "p1", "int",
        std::vector<size_t>{});
      p1 = std::numeric_limits<int>::min();
      current_statement__ = 49;
      p1 = context__.vals_i("p1")[(1 - 1)];
      current_statement__ = 49;
      stan::math::check_greater_or_equal(function__, "p1", p1, 1);
      current_statement__ = 50;
      context__.validate_dims("data initialization", "p2", "int",
        std::vector<size_t>{});
      p2 = std::numeric_limits<int>::min();
      current_statement__ = 50;
      p2 = context__.vals_i("p2")[(1 - 1)];
      current_statement__ = 50;
      stan::math::check_greater_or_equal(function__, "p2", p2, 1);
      current_statement__ = 51;
      context__.validate_dims("data initialization", "p3", "int",
        std::vector<size_t>{});
      p3 = std::numeric_limits<int>::min();
      current_statement__ = 51;
      p3 = context__.vals_i("p3")[(1 - 1)];
      current_statement__ = 51;
      stan::math::check_greater_or_equal(function__, "p3", p3, 1);
      current_statement__ = 52;
      context__.validate_dims("data initialization", "p4", "int",
        std::vector<size_t>{});
      p4 = std::numeric_limits<int>::min();
      current_statement__ = 52;
      p4 = context__.vals_i("p4")[(1 - 1)];
      current_statement__ = 52;
      stan::math::check_greater_or_equal(function__, "p4", p4, 1);
      current_statement__ = 53;
      context__.validate_dims("data initialization", "p5", "int",
        std::vector<size_t>{});
      p5 = std::numeric_limits<int>::min();
      current_statement__ = 53;
      p5 = context__.vals_i("p5")[(1 - 1)];
      current_statement__ = 53;
      stan::math::check_greater_or_equal(function__, "p5", p5, 1);
      current_statement__ = 54;
      context__.validate_dims("data initialization", "p8", "int",
        std::vector<size_t>{});
      p8 = std::numeric_limits<int>::min();
      current_statement__ = 54;
      p8 = context__.vals_i("p8")[(1 - 1)];
      current_statement__ = 54;
      stan::math::check_greater_or_equal(function__, "p8", p8, 1);
      current_statement__ = 55;
      context__.validate_dims("data initialization", "p9", "int",
        std::vector<size_t>{});
      p9 = std::numeric_limits<int>::min();
      current_statement__ = 55;
      p9 = context__.vals_i("p9")[(1 - 1)];
      current_statement__ = 55;
      stan::math::check_greater_or_equal(function__, "p9", p9, 1);
      current_statement__ = 56;
      stan::math::validate_non_negative_index("Z1", "n", n);
      current_statement__ = 57;
      stan::math::validate_non_negative_index("Z1", "p1", p1);
      current_statement__ = 58;
      context__.validate_dims("data initialization", "Z1", "double",
        std::vector<size_t>{static_cast<size_t>(n), static_cast<size_t>(p1)});
      Z1_data__ = Eigen::Matrix<double,-1,-1>::Constant(n, p1,
                    std::numeric_limits<double>::quiet_NaN());
      new (&Z1) Eigen::Map<Eigen::Matrix<double,-1,-1>>(Z1_data__.data(), n,
        p1);
      {
        std::vector<local_scalar_t__> Z1_flat__;
        current_statement__ = 58;
        Z1_flat__ = context__.vals_r("Z1");
        current_statement__ = 58;
        pos__ = 1;
        current_statement__ = 58;
        for (int sym1__ = 1; sym1__ <= p1; ++sym1__) {
          current_statement__ = 58;
          for (int sym2__ = 1; sym2__ <= n; ++sym2__) {
            current_statement__ = 58;
            stan::model::assign(Z1, Z1_flat__[(pos__ - 1)],
              "assigning variable Z1", stan::model::index_uni(sym2__),
              stan::model::index_uni(sym1__));
            current_statement__ = 58;
            pos__ = (pos__ + 1);
          }
        }
      }
      current_statement__ = 59;
      stan::math::validate_non_negative_index("Z2", "n", n);
      current_statement__ = 60;
      stan::math::validate_non_negative_index("Z2", "p2", p2);
      current_statement__ = 61;
      context__.validate_dims("data initialization", "Z2", "double",
        std::vector<size_t>{static_cast<size_t>(n), static_cast<size_t>(p2)});
      Z2_data__ = Eigen::Matrix<double,-1,-1>::Constant(n, p2,
                    std::numeric_limits<double>::quiet_NaN());
      new (&Z2) Eigen::Map<Eigen::Matrix<double,-1,-1>>(Z2_data__.data(), n,
        p2);
      {
        std::vector<local_scalar_t__> Z2_flat__;
        current_statement__ = 61;
        Z2_flat__ = context__.vals_r("Z2");
        current_statement__ = 61;
        pos__ = 1;
        current_statement__ = 61;
        for (int sym1__ = 1; sym1__ <= p2; ++sym1__) {
          current_statement__ = 61;
          for (int sym2__ = 1; sym2__ <= n; ++sym2__) {
            current_statement__ = 61;
            stan::model::assign(Z2, Z2_flat__[(pos__ - 1)],
              "assigning variable Z2", stan::model::index_uni(sym2__),
              stan::model::index_uni(sym1__));
            current_statement__ = 61;
            pos__ = (pos__ + 1);
          }
        }
      }
      current_statement__ = 62;
      stan::math::validate_non_negative_index("Z3", "n", n);
      current_statement__ = 63;
      stan::math::validate_non_negative_index("Z3", "p3", p3);
      current_statement__ = 64;
      context__.validate_dims("data initialization", "Z3", "double",
        std::vector<size_t>{static_cast<size_t>(n), static_cast<size_t>(p3)});
      Z3_data__ = Eigen::Matrix<double,-1,-1>::Constant(n, p3,
                    std::numeric_limits<double>::quiet_NaN());
      new (&Z3) Eigen::Map<Eigen::Matrix<double,-1,-1>>(Z3_data__.data(), n,
        p3);
      {
        std::vector<local_scalar_t__> Z3_flat__;
        current_statement__ = 64;
        Z3_flat__ = context__.vals_r("Z3");
        current_statement__ = 64;
        pos__ = 1;
        current_statement__ = 64;
        for (int sym1__ = 1; sym1__ <= p3; ++sym1__) {
          current_statement__ = 64;
          for (int sym2__ = 1; sym2__ <= n; ++sym2__) {
            current_statement__ = 64;
            stan::model::assign(Z3, Z3_flat__[(pos__ - 1)],
              "assigning variable Z3", stan::model::index_uni(sym2__),
              stan::model::index_uni(sym1__));
            current_statement__ = 64;
            pos__ = (pos__ + 1);
          }
        }
      }
      current_statement__ = 65;
      stan::math::validate_non_negative_index("Z4", "n", n);
      current_statement__ = 66;
      stan::math::validate_non_negative_index("Z4", "p4", p4);
      current_statement__ = 67;
      context__.validate_dims("data initialization", "Z4", "double",
        std::vector<size_t>{static_cast<size_t>(n), static_cast<size_t>(p4)});
      Z4_data__ = Eigen::Matrix<double,-1,-1>::Constant(n, p4,
                    std::numeric_limits<double>::quiet_NaN());
      new (&Z4) Eigen::Map<Eigen::Matrix<double,-1,-1>>(Z4_data__.data(), n,
        p4);
      {
        std::vector<local_scalar_t__> Z4_flat__;
        current_statement__ = 67;
        Z4_flat__ = context__.vals_r("Z4");
        current_statement__ = 67;
        pos__ = 1;
        current_statement__ = 67;
        for (int sym1__ = 1; sym1__ <= p4; ++sym1__) {
          current_statement__ = 67;
          for (int sym2__ = 1; sym2__ <= n; ++sym2__) {
            current_statement__ = 67;
            stan::model::assign(Z4, Z4_flat__[(pos__ - 1)],
              "assigning variable Z4", stan::model::index_uni(sym2__),
              stan::model::index_uni(sym1__));
            current_statement__ = 67;
            pos__ = (pos__ + 1);
          }
        }
      }
      current_statement__ = 68;
      stan::math::validate_non_negative_index("Z5", "n", n);
      current_statement__ = 69;
      stan::math::validate_non_negative_index("Z5", "p5", p5);
      current_statement__ = 70;
      context__.validate_dims("data initialization", "Z5", "double",
        std::vector<size_t>{static_cast<size_t>(n), static_cast<size_t>(p5)});
      Z5_data__ = Eigen::Matrix<double,-1,-1>::Constant(n, p5,
                    std::numeric_limits<double>::quiet_NaN());
      new (&Z5) Eigen::Map<Eigen::Matrix<double,-1,-1>>(Z5_data__.data(), n,
        p5);
      {
        std::vector<local_scalar_t__> Z5_flat__;
        current_statement__ = 70;
        Z5_flat__ = context__.vals_r("Z5");
        current_statement__ = 70;
        pos__ = 1;
        current_statement__ = 70;
        for (int sym1__ = 1; sym1__ <= p5; ++sym1__) {
          current_statement__ = 70;
          for (int sym2__ = 1; sym2__ <= n; ++sym2__) {
            current_statement__ = 70;
            stan::model::assign(Z5, Z5_flat__[(pos__ - 1)],
              "assigning variable Z5", stan::model::index_uni(sym2__),
              stan::model::index_uni(sym1__));
            current_statement__ = 70;
            pos__ = (pos__ + 1);
          }
        }
      }
      current_statement__ = 71;
      stan::math::validate_non_negative_index("Z8", "n", n);
      current_statement__ = 72;
      stan::math::validate_non_negative_index("Z8", "p8", p8);
      current_statement__ = 73;
      context__.validate_dims("data initialization", "Z8", "double",
        std::vector<size_t>{static_cast<size_t>(n), static_cast<size_t>(p8)});
      Z8_data__ = Eigen::Matrix<double,-1,-1>::Constant(n, p8,
                    std::numeric_limits<double>::quiet_NaN());
      new (&Z8) Eigen::Map<Eigen::Matrix<double,-1,-1>>(Z8_data__.data(), n,
        p8);
      {
        std::vector<local_scalar_t__> Z8_flat__;
        current_statement__ = 73;
        Z8_flat__ = context__.vals_r("Z8");
        current_statement__ = 73;
        pos__ = 1;
        current_statement__ = 73;
        for (int sym1__ = 1; sym1__ <= p8; ++sym1__) {
          current_statement__ = 73;
          for (int sym2__ = 1; sym2__ <= n; ++sym2__) {
            current_statement__ = 73;
            stan::model::assign(Z8, Z8_flat__[(pos__ - 1)],
              "assigning variable Z8", stan::model::index_uni(sym2__),
              stan::model::index_uni(sym1__));
            current_statement__ = 73;
            pos__ = (pos__ + 1);
          }
        }
      }
      current_statement__ = 74;
      stan::math::validate_non_negative_index("Z9", "n", n);
      current_statement__ = 75;
      stan::math::validate_non_negative_index("Z9", "p9", p9);
      current_statement__ = 76;
      context__.validate_dims("data initialization", "Z9", "double",
        std::vector<size_t>{static_cast<size_t>(n), static_cast<size_t>(p9)});
      Z9_data__ = Eigen::Matrix<double,-1,-1>::Constant(n, p9,
                    std::numeric_limits<double>::quiet_NaN());
      new (&Z9) Eigen::Map<Eigen::Matrix<double,-1,-1>>(Z9_data__.data(), n,
        p9);
      {
        std::vector<local_scalar_t__> Z9_flat__;
        current_statement__ = 76;
        Z9_flat__ = context__.vals_r("Z9");
        current_statement__ = 76;
        pos__ = 1;
        current_statement__ = 76;
        for (int sym1__ = 1; sym1__ <= p9; ++sym1__) {
          current_statement__ = 76;
          for (int sym2__ = 1; sym2__ <= n; ++sym2__) {
            current_statement__ = 76;
            stan::model::assign(Z9, Z9_flat__[(pos__ - 1)],
              "assigning variable Z9", stan::model::index_uni(sym2__),
              stan::model::index_uni(sym1__));
            current_statement__ = 76;
            pos__ = (pos__ + 1);
          }
        }
      }
      current_statement__ = 77;
      stan::math::validate_non_negative_index("y", "n", n);
      current_statement__ = 78;
      context__.validate_dims("data initialization", "y", "double",
        std::vector<size_t>{static_cast<size_t>(n)});
      y = std::vector<double>(n, std::numeric_limits<double>::quiet_NaN());
      current_statement__ = 78;
      y = context__.vals_r("y");
      current_statement__ = 79;
      context__.validate_dims("data initialization", "phi", "double",
        std::vector<size_t>{});
      phi = std::numeric_limits<double>::quiet_NaN();
      current_statement__ = 79;
      phi = context__.vals_r("phi")[(1 - 1)];
      current_statement__ = 80;
      stan::math::validate_non_negative_index("index", "n", n);
      current_statement__ = 81;
      context__.validate_dims("data initialization", "index", "int",
        std::vector<size_t>{static_cast<size_t>(n)});
      index = std::vector<int>(n, std::numeric_limits<int>::min());
      current_statement__ = 81;
      index = context__.vals_i("index");
      current_statement__ = 82;
      stan::math::validate_non_negative_index("sigma", "p4", p4);
      current_statement__ = 83;
      stan::math::validate_non_negative_index("r", "p1", p1);
      current_statement__ = 84;
      stan::math::validate_non_negative_index("b", "p2", p2);
      current_statement__ = 85;
      stan::math::validate_non_negative_index("g", "p3", p3);
      current_statement__ = 86;
      stan::math::validate_non_negative_index("l", "p4", p4);
      current_statement__ = 87;
      stan::math::validate_non_negative_index("gl", "p5", p5);
      current_statement__ = 88;
      stan::math::validate_non_negative_index("t", "p8", p8);
      current_statement__ = 89;
      stan::math::validate_non_negative_index("gt", "p9", p9);
      current_statement__ = 90;
      stan::math::validate_non_negative_index("y_gen", "n", n);
      current_statement__ = 91;
      stan::math::validate_non_negative_index("expectation", "n", n);
      current_statement__ = 92;
      stan::math::validate_non_negative_index("sigma_vec", "n", n);
      current_statement__ = 93;
      stan::math::validate_non_negative_index("y_log_like", "n", n);
    } catch (const std::exception& e) {
      stan::lang::rethrow_located(e, locations_array__[current_statement__]);
    }
    num_params_r__ = 1 + p4 + 1 + 1 + 1 + p1 + 1 + p2 + 1 + p3 + 1 + p4 + 1 +
      p5 + 1 + p8 + 1 + p9 + n;
  }
  inline std::string model_name() const final {
    return "model_IBD3";
  }
  inline std::vector<std::string> model_compile_info() const noexcept {
    return std::vector<std::string>{"stanc_version = stanc3 v2.32.2",
             "stancflags = --allow-undefined"};
  }
  template <bool propto__, bool jacobian__, typename VecR, typename VecI,
            stan::require_vector_like_t<VecR>* = nullptr,
            stan::require_vector_like_vt<std::is_integral, VecI>* = nullptr>
  inline stan::scalar_type_t<VecR>
  log_prob_impl(VecR& params_r__, VecI& params_i__, std::ostream*
                pstream__ = nullptr) const {
    using T__ = stan::scalar_type_t<VecR>;
    using local_scalar_t__ = T__;
    T__ lp__(0.0);
    stan::math::accumulator<T__> lp_accum__;
    stan::io::deserializer<local_scalar_t__> in__(params_r__, params_i__);
    int current_statement__ = 0;
    local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
    // suppress unused var warning
    (void) DUMMY_VAR__;
    static constexpr const char* function__ =
      "model_IBD3_namespace::log_prob";
    // suppress unused var warning
    (void) function__;
    try {
      local_scalar_t__ s_sigma = DUMMY_VAR__;
      current_statement__ = 1;
      s_sigma = in__.template read_constrain_lb<local_scalar_t__,
                  jacobian__>(0, lp__);
      std::vector<local_scalar_t__> sigma =
        std::vector<local_scalar_t__>(p4, DUMMY_VAR__);
      current_statement__ = 2;
      sigma = in__.template read_constrain_lb<std::vector<local_scalar_t__>,
                jacobian__>(0, lp__, p4);
      local_scalar_t__ s_mu = DUMMY_VAR__;
      current_statement__ = 3;
      s_mu = in__.template read_constrain_lb<local_scalar_t__, jacobian__>(0,
               lp__);
      local_scalar_t__ mu = DUMMY_VAR__;
      current_statement__ = 4;
      mu = in__.template read<local_scalar_t__>();
      local_scalar_t__ s_r = DUMMY_VAR__;
      current_statement__ = 5;
      s_r = in__.template read_constrain_lb<local_scalar_t__, jacobian__>(0,
              lp__);
      Eigen::Matrix<local_scalar_t__,-1,1> r =
        Eigen::Matrix<local_scalar_t__,-1,1>::Constant(p1, DUMMY_VAR__);
      current_statement__ = 6;
      r = in__.template read<Eigen::Matrix<local_scalar_t__,-1,1>>(p1);
      local_scalar_t__ s_b = DUMMY_VAR__;
      current_statement__ = 7;
      s_b = in__.template read_constrain_lb<local_scalar_t__, jacobian__>(0,
              lp__);
      Eigen::Matrix<local_scalar_t__,-1,1> b =
        Eigen::Matrix<local_scalar_t__,-1,1>::Constant(p2, DUMMY_VAR__);
      current_statement__ = 8;
      b = in__.template read<Eigen::Matrix<local_scalar_t__,-1,1>>(p2);
      local_scalar_t__ s_g = DUMMY_VAR__;
      current_statement__ = 9;
      s_g = in__.template read_constrain_lb<local_scalar_t__, jacobian__>(0,
              lp__);
      Eigen::Matrix<local_scalar_t__,-1,1> g =
        Eigen::Matrix<local_scalar_t__,-1,1>::Constant(p3, DUMMY_VAR__);
      current_statement__ = 10;
      g = in__.template read<Eigen::Matrix<local_scalar_t__,-1,1>>(p3);
      local_scalar_t__ s_l = DUMMY_VAR__;
      current_statement__ = 11;
      s_l = in__.template read_constrain_lb<local_scalar_t__, jacobian__>(0,
              lp__);
      Eigen::Matrix<local_scalar_t__,-1,1> l =
        Eigen::Matrix<local_scalar_t__,-1,1>::Constant(p4, DUMMY_VAR__);
      current_statement__ = 12;
      l = in__.template read<Eigen::Matrix<local_scalar_t__,-1,1>>(p4);
      local_scalar_t__ s_gl = DUMMY_VAR__;
      current_statement__ = 13;
      s_gl = in__.template read_constrain_lb<local_scalar_t__, jacobian__>(0,
               lp__);
      Eigen::Matrix<local_scalar_t__,-1,1> gl =
        Eigen::Matrix<local_scalar_t__,-1,1>::Constant(p5, DUMMY_VAR__);
      current_statement__ = 14;
      gl = in__.template read<Eigen::Matrix<local_scalar_t__,-1,1>>(p5);
      local_scalar_t__ s_t = DUMMY_VAR__;
      current_statement__ = 15;
      s_t = in__.template read_constrain_lb<local_scalar_t__, jacobian__>(0,
              lp__);
      Eigen::Matrix<local_scalar_t__,-1,1> t =
        Eigen::Matrix<local_scalar_t__,-1,1>::Constant(p8, DUMMY_VAR__);
      current_statement__ = 16;
      t = in__.template read<Eigen::Matrix<local_scalar_t__,-1,1>>(p8);
      local_scalar_t__ s_gt = DUMMY_VAR__;
      current_statement__ = 17;
      s_gt = in__.template read_constrain_lb<local_scalar_t__, jacobian__>(0,
               lp__);
      Eigen::Matrix<local_scalar_t__,-1,1> gt =
        Eigen::Matrix<local_scalar_t__,-1,1>::Constant(p9, DUMMY_VAR__);
      current_statement__ = 18;
      gt = in__.template read<Eigen::Matrix<local_scalar_t__,-1,1>>(p9);
      std::vector<local_scalar_t__> y_gen =
        std::vector<local_scalar_t__>(n, DUMMY_VAR__);
      current_statement__ = 19;
      y_gen = in__.template read<std::vector<local_scalar_t__>>(n);
      Eigen::Matrix<local_scalar_t__,-1,1> expectation =
        Eigen::Matrix<local_scalar_t__,-1,1>::Constant(n, DUMMY_VAR__);
      Eigen::Matrix<local_scalar_t__,-1,1> sigma_vec =
        Eigen::Matrix<local_scalar_t__,-1,1>::Constant(n, DUMMY_VAR__);
      current_statement__ = 23;
      stan::model::assign(expectation,
        stan::math::add(
          stan::math::add(
            stan::math::add(
              stan::math::add(
                stan::math::add(
                  stan::math::add(
                    stan::math::add(mu, stan::math::multiply(Z1, r)),
                    stan::math::multiply(Z2, b)), stan::math::multiply(Z3, g)),
                stan::math::multiply(Z4, l)), stan::math::multiply(Z5, gl)),
            stan::math::multiply(Z8, t)), stan::math::multiply(Z9, gt)),
        "assigning variable expectation");
      current_statement__ = 24;
      stan::model::assign(sigma_vec,
        stan::math::to_vector(
          stan::model::rvalue(sigma, "sigma", stan::model::index_multi(index))),
        "assigning variable sigma_vec");
      current_statement__ = 21;
      stan::math::check_greater_or_equal(function__, "sigma_vec", sigma_vec,
        0);
      {
        current_statement__ = 28;
        lp_accum__.add(stan::math::cauchy_lpdf<propto__>(s_sigma, 0, phi));
        current_statement__ = 29;
        lp_accum__.add(stan::math::cauchy_lpdf<propto__>(sigma, 0, s_sigma));
        current_statement__ = 30;
        lp_accum__.add(stan::math::cauchy_lpdf<propto__>(s_mu, 0, phi));
        current_statement__ = 31;
        lp_accum__.add(stan::math::normal_lpdf<propto__>(mu, 0, s_mu));
        current_statement__ = 32;
        lp_accum__.add(stan::math::cauchy_lpdf<propto__>(s_r, 0, phi));
        current_statement__ = 33;
        lp_accum__.add(stan::math::normal_lpdf<propto__>(r, 0, s_r));
        current_statement__ = 34;
        lp_accum__.add(stan::math::cauchy_lpdf<propto__>(s_b, 0, phi));
        current_statement__ = 35;
        lp_accum__.add(stan::math::normal_lpdf<propto__>(b, 0, s_b));
        current_statement__ = 36;
        lp_accum__.add(stan::math::cauchy_lpdf<propto__>(s_g, 0, phi));
        current_statement__ = 37;
        lp_accum__.add(stan::math::normal_lpdf<propto__>(g, 0, s_g));
        current_statement__ = 38;
        lp_accum__.add(stan::math::cauchy_lpdf<propto__>(s_l, 0, phi));
        current_statement__ = 39;
        lp_accum__.add(stan::math::normal_lpdf<propto__>(l, 0, s_l));
        current_statement__ = 40;
        lp_accum__.add(stan::math::cauchy_lpdf<propto__>(s_gl, 0, phi));
        current_statement__ = 41;
        lp_accum__.add(stan::math::normal_lpdf<propto__>(gl, 0, s_gl));
        current_statement__ = 42;
        lp_accum__.add(stan::math::cauchy_lpdf<propto__>(s_t, 0, phi));
        current_statement__ = 43;
        lp_accum__.add(stan::math::normal_lpdf<propto__>(t, 0, s_t));
        current_statement__ = 44;
        lp_accum__.add(stan::math::cauchy_lpdf<propto__>(s_gt, 0, phi));
        current_statement__ = 45;
        lp_accum__.add(stan::math::normal_lpdf<propto__>(gt, 0, s_gt));
        current_statement__ = 46;
        lp_accum__.add(stan::math::normal_lpdf<propto__>(y, expectation,
                         sigma_vec));
        current_statement__ = 47;
        lp_accum__.add(stan::math::normal_lpdf<propto__>(y_gen, expectation,
                         sigma_vec));
      }
    } catch (const std::exception& e) {
      stan::lang::rethrow_located(e, locations_array__[current_statement__]);
    }
    lp_accum__.add(lp__);
    return lp_accum__.sum();
  }
  template <typename RNG, typename VecR, typename VecI, typename VecVar,
            stan::require_vector_like_vt<std::is_floating_point,
            VecR>* = nullptr, stan::require_vector_like_vt<std::is_integral,
            VecI>* = nullptr, stan::require_vector_vt<std::is_floating_point,
            VecVar>* = nullptr>
  inline void
  write_array_impl(RNG& base_rng__, VecR& params_r__, VecI& params_i__,
                   VecVar& vars__, const bool
                   emit_transformed_parameters__ = true, const bool
                   emit_generated_quantities__ = true, std::ostream*
                   pstream__ = nullptr) const {
    using local_scalar_t__ = double;
    stan::io::deserializer<local_scalar_t__> in__(params_r__, params_i__);
    stan::io::serializer<local_scalar_t__> out__(vars__);
    static constexpr bool propto__ = true;
    // suppress unused var warning
    (void) propto__;
    double lp__ = 0.0;
    // suppress unused var warning
    (void) lp__;
    int current_statement__ = 0;
    stan::math::accumulator<double> lp_accum__;
    local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
    // suppress unused var warning
    (void) DUMMY_VAR__;
    constexpr bool jacobian__ = false;
    static constexpr const char* function__ =
      "model_IBD3_namespace::write_array";
    // suppress unused var warning
    (void) function__;
    try {
      double s_sigma = std::numeric_limits<double>::quiet_NaN();
      current_statement__ = 1;
      s_sigma = in__.template read_constrain_lb<local_scalar_t__,
                  jacobian__>(0, lp__);
      std::vector<double> sigma =
        std::vector<double>(p4, std::numeric_limits<double>::quiet_NaN());
      current_statement__ = 2;
      sigma = in__.template read_constrain_lb<std::vector<local_scalar_t__>,
                jacobian__>(0, lp__, p4);
      double s_mu = std::numeric_limits<double>::quiet_NaN();
      current_statement__ = 3;
      s_mu = in__.template read_constrain_lb<local_scalar_t__, jacobian__>(0,
               lp__);
      double mu = std::numeric_limits<double>::quiet_NaN();
      current_statement__ = 4;
      mu = in__.template read<local_scalar_t__>();
      double s_r = std::numeric_limits<double>::quiet_NaN();
      current_statement__ = 5;
      s_r = in__.template read_constrain_lb<local_scalar_t__, jacobian__>(0,
              lp__);
      Eigen::Matrix<double,-1,1> r =
        Eigen::Matrix<double,-1,1>::Constant(p1,
          std::numeric_limits<double>::quiet_NaN());
      current_statement__ = 6;
      r = in__.template read<Eigen::Matrix<local_scalar_t__,-1,1>>(p1);
      double s_b = std::numeric_limits<double>::quiet_NaN();
      current_statement__ = 7;
      s_b = in__.template read_constrain_lb<local_scalar_t__, jacobian__>(0,
              lp__);
      Eigen::Matrix<double,-1,1> b =
        Eigen::Matrix<double,-1,1>::Constant(p2,
          std::numeric_limits<double>::quiet_NaN());
      current_statement__ = 8;
      b = in__.template read<Eigen::Matrix<local_scalar_t__,-1,1>>(p2);
      double s_g = std::numeric_limits<double>::quiet_NaN();
      current_statement__ = 9;
      s_g = in__.template read_constrain_lb<local_scalar_t__, jacobian__>(0,
              lp__);
      Eigen::Matrix<double,-1,1> g =
        Eigen::Matrix<double,-1,1>::Constant(p3,
          std::numeric_limits<double>::quiet_NaN());
      current_statement__ = 10;
      g = in__.template read<Eigen::Matrix<local_scalar_t__,-1,1>>(p3);
      double s_l = std::numeric_limits<double>::quiet_NaN();
      current_statement__ = 11;
      s_l = in__.template read_constrain_lb<local_scalar_t__, jacobian__>(0,
              lp__);
      Eigen::Matrix<double,-1,1> l =
        Eigen::Matrix<double,-1,1>::Constant(p4,
          std::numeric_limits<double>::quiet_NaN());
      current_statement__ = 12;
      l = in__.template read<Eigen::Matrix<local_scalar_t__,-1,1>>(p4);
      double s_gl = std::numeric_limits<double>::quiet_NaN();
      current_statement__ = 13;
      s_gl = in__.template read_constrain_lb<local_scalar_t__, jacobian__>(0,
               lp__);
      Eigen::Matrix<double,-1,1> gl =
        Eigen::Matrix<double,-1,1>::Constant(p5,
          std::numeric_limits<double>::quiet_NaN());
      current_statement__ = 14;
      gl = in__.template read<Eigen::Matrix<local_scalar_t__,-1,1>>(p5);
      double s_t = std::numeric_limits<double>::quiet_NaN();
      current_statement__ = 15;
      s_t = in__.template read_constrain_lb<local_scalar_t__, jacobian__>(0,
              lp__);
      Eigen::Matrix<double,-1,1> t =
        Eigen::Matrix<double,-1,1>::Constant(p8,
          std::numeric_limits<double>::quiet_NaN());
      current_statement__ = 16;
      t = in__.template read<Eigen::Matrix<local_scalar_t__,-1,1>>(p8);
      double s_gt = std::numeric_limits<double>::quiet_NaN();
      current_statement__ = 17;
      s_gt = in__.template read_constrain_lb<local_scalar_t__, jacobian__>(0,
               lp__);
      Eigen::Matrix<double,-1,1> gt =
        Eigen::Matrix<double,-1,1>::Constant(p9,
          std::numeric_limits<double>::quiet_NaN());
      current_statement__ = 18;
      gt = in__.template read<Eigen::Matrix<local_scalar_t__,-1,1>>(p9);
      std::vector<double> y_gen =
        std::vector<double>(n, std::numeric_limits<double>::quiet_NaN());
      current_statement__ = 19;
      y_gen = in__.template read<std::vector<local_scalar_t__>>(n);
      Eigen::Matrix<double,-1,1> expectation =
        Eigen::Matrix<double,-1,1>::Constant(n,
          std::numeric_limits<double>::quiet_NaN());
      Eigen::Matrix<double,-1,1> sigma_vec =
        Eigen::Matrix<double,-1,1>::Constant(n,
          std::numeric_limits<double>::quiet_NaN());
      out__.write(s_sigma);
      out__.write(sigma);
      out__.write(s_mu);
      out__.write(mu);
      out__.write(s_r);
      out__.write(r);
      out__.write(s_b);
      out__.write(b);
      out__.write(s_g);
      out__.write(g);
      out__.write(s_l);
      out__.write(l);
      out__.write(s_gl);
      out__.write(gl);
      out__.write(s_t);
      out__.write(t);
      out__.write(s_gt);
      out__.write(gt);
      out__.write(y_gen);
      if (stan::math::logical_negation(
            (stan::math::primitive_value(emit_transformed_parameters__) ||
            stan::math::primitive_value(emit_generated_quantities__)))) {
        return ;
      }
      current_statement__ = 23;
      stan::model::assign(expectation,
        stan::math::add(
          stan::math::add(
            stan::math::add(
              stan::math::add(
                stan::math::add(
                  stan::math::add(
                    stan::math::add(mu, stan::math::multiply(Z1, r)),
                    stan::math::multiply(Z2, b)), stan::math::multiply(Z3, g)),
                stan::math::multiply(Z4, l)), stan::math::multiply(Z5, gl)),
            stan::math::multiply(Z8, t)), stan::math::multiply(Z9, gt)),
        "assigning variable expectation");
      current_statement__ = 24;
      stan::model::assign(sigma_vec,
        stan::math::to_vector(
          stan::model::rvalue(sigma, "sigma", stan::model::index_multi(index))),
        "assigning variable sigma_vec");
      current_statement__ = 21;
      stan::math::check_greater_or_equal(function__, "sigma_vec", sigma_vec,
        0);
      if (emit_transformed_parameters__) {
        out__.write(expectation);
        out__.write(sigma_vec);
      }
      if (stan::math::logical_negation(emit_generated_quantities__)) {
        return ;
      }
      std::vector<double> y_log_like =
        std::vector<double>(n, std::numeric_limits<double>::quiet_NaN());
      current_statement__ = 27;
      for (int j = 1; j <= n; ++j) {
        current_statement__ = 25;
        stan::model::assign(y_log_like,
          stan::math::cauchy_lpdf<false>(
            stan::model::rvalue(y, "y", stan::model::index_uni(j)),
            stan::model::rvalue(expectation, "expectation",
              stan::model::index_uni(j)),
            stan::model::rvalue(sigma_vec, "sigma_vec",
              stan::model::index_uni(j))), "assigning variable y_log_like",
          stan::model::index_uni(j));
      }
      out__.write(y_log_like);
    } catch (const std::exception& e) {
      stan::lang::rethrow_located(e, locations_array__[current_statement__]);
    }
  }
  template <typename VecVar, typename VecI,
            stan::require_vector_t<VecVar>* = nullptr,
            stan::require_vector_like_vt<std::is_integral, VecI>* = nullptr>
  inline void
  unconstrain_array_impl(const VecVar& params_r__, const VecI& params_i__,
                         VecVar& vars__, std::ostream* pstream__ = nullptr) const {
    using local_scalar_t__ = double;
    stan::io::deserializer<local_scalar_t__> in__(params_r__, params_i__);
    stan::io::serializer<local_scalar_t__> out__(vars__);
    int current_statement__ = 0;
    local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
    // suppress unused var warning
    (void) DUMMY_VAR__;
    try {
      int pos__ = std::numeric_limits<int>::min();
      pos__ = 1;
      local_scalar_t__ s_sigma = DUMMY_VAR__;
      current_statement__ = 1;
      s_sigma = in__.read<local_scalar_t__>();
      out__.write_free_lb(0, s_sigma);
      std::vector<local_scalar_t__> sigma =
        std::vector<local_scalar_t__>(p4, DUMMY_VAR__);
      current_statement__ = 2;
      stan::model::assign(sigma,
        in__.read<std::vector<local_scalar_t__>>(p4),
        "assigning variable sigma");
      out__.write_free_lb(0, sigma);
      local_scalar_t__ s_mu = DUMMY_VAR__;
      current_statement__ = 3;
      s_mu = in__.read<local_scalar_t__>();
      out__.write_free_lb(0, s_mu);
      local_scalar_t__ mu = DUMMY_VAR__;
      current_statement__ = 4;
      mu = in__.read<local_scalar_t__>();
      out__.write(mu);
      local_scalar_t__ s_r = DUMMY_VAR__;
      current_statement__ = 5;
      s_r = in__.read<local_scalar_t__>();
      out__.write_free_lb(0, s_r);
      Eigen::Matrix<local_scalar_t__,-1,1> r =
        Eigen::Matrix<local_scalar_t__,-1,1>::Constant(p1, DUMMY_VAR__);
      current_statement__ = 6;
      stan::model::assign(r,
        in__.read<Eigen::Matrix<local_scalar_t__,-1,1>>(p1),
        "assigning variable r");
      out__.write(r);
      local_scalar_t__ s_b = DUMMY_VAR__;
      current_statement__ = 7;
      s_b = in__.read<local_scalar_t__>();
      out__.write_free_lb(0, s_b);
      Eigen::Matrix<local_scalar_t__,-1,1> b =
        Eigen::Matrix<local_scalar_t__,-1,1>::Constant(p2, DUMMY_VAR__);
      current_statement__ = 8;
      stan::model::assign(b,
        in__.read<Eigen::Matrix<local_scalar_t__,-1,1>>(p2),
        "assigning variable b");
      out__.write(b);
      local_scalar_t__ s_g = DUMMY_VAR__;
      current_statement__ = 9;
      s_g = in__.read<local_scalar_t__>();
      out__.write_free_lb(0, s_g);
      Eigen::Matrix<local_scalar_t__,-1,1> g =
        Eigen::Matrix<local_scalar_t__,-1,1>::Constant(p3, DUMMY_VAR__);
      current_statement__ = 10;
      stan::model::assign(g,
        in__.read<Eigen::Matrix<local_scalar_t__,-1,1>>(p3),
        "assigning variable g");
      out__.write(g);
      local_scalar_t__ s_l = DUMMY_VAR__;
      current_statement__ = 11;
      s_l = in__.read<local_scalar_t__>();
      out__.write_free_lb(0, s_l);
      Eigen::Matrix<local_scalar_t__,-1,1> l =
        Eigen::Matrix<local_scalar_t__,-1,1>::Constant(p4, DUMMY_VAR__);
      current_statement__ = 12;
      stan::model::assign(l,
        in__.read<Eigen::Matrix<local_scalar_t__,-1,1>>(p4),
        "assigning variable l");
      out__.write(l);
      local_scalar_t__ s_gl = DUMMY_VAR__;
      current_statement__ = 13;
      s_gl = in__.read<local_scalar_t__>();
      out__.write_free_lb(0, s_gl);
      Eigen::Matrix<local_scalar_t__,-1,1> gl =
        Eigen::Matrix<local_scalar_t__,-1,1>::Constant(p5, DUMMY_VAR__);
      current_statement__ = 14;
      stan::model::assign(gl,
        in__.read<Eigen::Matrix<local_scalar_t__,-1,1>>(p5),
        "assigning variable gl");
      out__.write(gl);
      local_scalar_t__ s_t = DUMMY_VAR__;
      current_statement__ = 15;
      s_t = in__.read<local_scalar_t__>();
      out__.write_free_lb(0, s_t);
      Eigen::Matrix<local_scalar_t__,-1,1> t =
        Eigen::Matrix<local_scalar_t__,-1,1>::Constant(p8, DUMMY_VAR__);
      current_statement__ = 16;
      stan::model::assign(t,
        in__.read<Eigen::Matrix<local_scalar_t__,-1,1>>(p8),
        "assigning variable t");
      out__.write(t);
      local_scalar_t__ s_gt = DUMMY_VAR__;
      current_statement__ = 17;
      s_gt = in__.read<local_scalar_t__>();
      out__.write_free_lb(0, s_gt);
      Eigen::Matrix<local_scalar_t__,-1,1> gt =
        Eigen::Matrix<local_scalar_t__,-1,1>::Constant(p9, DUMMY_VAR__);
      current_statement__ = 18;
      stan::model::assign(gt,
        in__.read<Eigen::Matrix<local_scalar_t__,-1,1>>(p9),
        "assigning variable gt");
      out__.write(gt);
      std::vector<local_scalar_t__> y_gen =
        std::vector<local_scalar_t__>(n, DUMMY_VAR__);
      current_statement__ = 19;
      stan::model::assign(y_gen, in__.read<std::vector<local_scalar_t__>>(n),
        "assigning variable y_gen");
      out__.write(y_gen);
    } catch (const std::exception& e) {
      stan::lang::rethrow_located(e, locations_array__[current_statement__]);
    }
  }
  template <typename VecVar, stan::require_vector_t<VecVar>* = nullptr>
  inline void
  transform_inits_impl(const stan::io::var_context& context__, VecVar&
                       vars__, std::ostream* pstream__ = nullptr) const {
    using local_scalar_t__ = double;
    stan::io::serializer<local_scalar_t__> out__(vars__);
    int current_statement__ = 0;
    local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
    // suppress unused var warning
    (void) DUMMY_VAR__;
    try {
      current_statement__ = 1;
      context__.validate_dims("parameter initialization", "s_sigma",
        "double", std::vector<size_t>{});
      current_statement__ = 2;
      context__.validate_dims("parameter initialization", "sigma", "double",
        std::vector<size_t>{static_cast<size_t>(p4)});
      current_statement__ = 3;
      context__.validate_dims("parameter initialization", "s_mu", "double",
        std::vector<size_t>{});
      current_statement__ = 4;
      context__.validate_dims("parameter initialization", "mu", "double",
        std::vector<size_t>{});
      current_statement__ = 5;
      context__.validate_dims("parameter initialization", "s_r", "double",
        std::vector<size_t>{});
      current_statement__ = 6;
      context__.validate_dims("parameter initialization", "r", "double",
        std::vector<size_t>{static_cast<size_t>(p1)});
      current_statement__ = 7;
      context__.validate_dims("parameter initialization", "s_b", "double",
        std::vector<size_t>{});
      current_statement__ = 8;
      context__.validate_dims("parameter initialization", "b", "double",
        std::vector<size_t>{static_cast<size_t>(p2)});
      current_statement__ = 9;
      context__.validate_dims("parameter initialization", "s_g", "double",
        std::vector<size_t>{});
      current_statement__ = 10;
      context__.validate_dims("parameter initialization", "g", "double",
        std::vector<size_t>{static_cast<size_t>(p3)});
      current_statement__ = 11;
      context__.validate_dims("parameter initialization", "s_l", "double",
        std::vector<size_t>{});
      current_statement__ = 12;
      context__.validate_dims("parameter initialization", "l", "double",
        std::vector<size_t>{static_cast<size_t>(p4)});
      current_statement__ = 13;
      context__.validate_dims("parameter initialization", "s_gl", "double",
        std::vector<size_t>{});
      current_statement__ = 14;
      context__.validate_dims("parameter initialization", "gl", "double",
        std::vector<size_t>{static_cast<size_t>(p5)});
      current_statement__ = 15;
      context__.validate_dims("parameter initialization", "s_t", "double",
        std::vector<size_t>{});
      current_statement__ = 16;
      context__.validate_dims("parameter initialization", "t", "double",
        std::vector<size_t>{static_cast<size_t>(p8)});
      current_statement__ = 17;
      context__.validate_dims("parameter initialization", "s_gt", "double",
        std::vector<size_t>{});
      current_statement__ = 18;
      context__.validate_dims("parameter initialization", "gt", "double",
        std::vector<size_t>{static_cast<size_t>(p9)});
      current_statement__ = 19;
      context__.validate_dims("parameter initialization", "y_gen", "double",
        std::vector<size_t>{static_cast<size_t>(n)});
      int pos__ = std::numeric_limits<int>::min();
      pos__ = 1;
      local_scalar_t__ s_sigma = DUMMY_VAR__;
      current_statement__ = 1;
      s_sigma = context__.vals_r("s_sigma")[(1 - 1)];
      out__.write_free_lb(0, s_sigma);
      std::vector<local_scalar_t__> sigma =
        std::vector<local_scalar_t__>(p4, DUMMY_VAR__);
      current_statement__ = 2;
      sigma = context__.vals_r("sigma");
      out__.write_free_lb(0, sigma);
      local_scalar_t__ s_mu = DUMMY_VAR__;
      current_statement__ = 3;
      s_mu = context__.vals_r("s_mu")[(1 - 1)];
      out__.write_free_lb(0, s_mu);
      local_scalar_t__ mu = DUMMY_VAR__;
      current_statement__ = 4;
      mu = context__.vals_r("mu")[(1 - 1)];
      out__.write(mu);
      local_scalar_t__ s_r = DUMMY_VAR__;
      current_statement__ = 5;
      s_r = context__.vals_r("s_r")[(1 - 1)];
      out__.write_free_lb(0, s_r);
      Eigen::Matrix<local_scalar_t__,-1,1> r =
        Eigen::Matrix<local_scalar_t__,-1,1>::Constant(p1, DUMMY_VAR__);
      {
        std::vector<local_scalar_t__> r_flat__;
        current_statement__ = 6;
        r_flat__ = context__.vals_r("r");
        current_statement__ = 6;
        pos__ = 1;
        current_statement__ = 6;
        for (int sym1__ = 1; sym1__ <= p1; ++sym1__) {
          current_statement__ = 6;
          stan::model::assign(r, r_flat__[(pos__ - 1)],
            "assigning variable r", stan::model::index_uni(sym1__));
          current_statement__ = 6;
          pos__ = (pos__ + 1);
        }
      }
      out__.write(r);
      local_scalar_t__ s_b = DUMMY_VAR__;
      current_statement__ = 7;
      s_b = context__.vals_r("s_b")[(1 - 1)];
      out__.write_free_lb(0, s_b);
      Eigen::Matrix<local_scalar_t__,-1,1> b =
        Eigen::Matrix<local_scalar_t__,-1,1>::Constant(p2, DUMMY_VAR__);
      {
        std::vector<local_scalar_t__> b_flat__;
        current_statement__ = 8;
        b_flat__ = context__.vals_r("b");
        current_statement__ = 8;
        pos__ = 1;
        current_statement__ = 8;
        for (int sym1__ = 1; sym1__ <= p2; ++sym1__) {
          current_statement__ = 8;
          stan::model::assign(b, b_flat__[(pos__ - 1)],
            "assigning variable b", stan::model::index_uni(sym1__));
          current_statement__ = 8;
          pos__ = (pos__ + 1);
        }
      }
      out__.write(b);
      local_scalar_t__ s_g = DUMMY_VAR__;
      current_statement__ = 9;
      s_g = context__.vals_r("s_g")[(1 - 1)];
      out__.write_free_lb(0, s_g);
      Eigen::Matrix<local_scalar_t__,-1,1> g =
        Eigen::Matrix<local_scalar_t__,-1,1>::Constant(p3, DUMMY_VAR__);
      {
        std::vector<local_scalar_t__> g_flat__;
        current_statement__ = 10;
        g_flat__ = context__.vals_r("g");
        current_statement__ = 10;
        pos__ = 1;
        current_statement__ = 10;
        for (int sym1__ = 1; sym1__ <= p3; ++sym1__) {
          current_statement__ = 10;
          stan::model::assign(g, g_flat__[(pos__ - 1)],
            "assigning variable g", stan::model::index_uni(sym1__));
          current_statement__ = 10;
          pos__ = (pos__ + 1);
        }
      }
      out__.write(g);
      local_scalar_t__ s_l = DUMMY_VAR__;
      current_statement__ = 11;
      s_l = context__.vals_r("s_l")[(1 - 1)];
      out__.write_free_lb(0, s_l);
      Eigen::Matrix<local_scalar_t__,-1,1> l =
        Eigen::Matrix<local_scalar_t__,-1,1>::Constant(p4, DUMMY_VAR__);
      {
        std::vector<local_scalar_t__> l_flat__;
        current_statement__ = 12;
        l_flat__ = context__.vals_r("l");
        current_statement__ = 12;
        pos__ = 1;
        current_statement__ = 12;
        for (int sym1__ = 1; sym1__ <= p4; ++sym1__) {
          current_statement__ = 12;
          stan::model::assign(l, l_flat__[(pos__ - 1)],
            "assigning variable l", stan::model::index_uni(sym1__));
          current_statement__ = 12;
          pos__ = (pos__ + 1);
        }
      }
      out__.write(l);
      local_scalar_t__ s_gl = DUMMY_VAR__;
      current_statement__ = 13;
      s_gl = context__.vals_r("s_gl")[(1 - 1)];
      out__.write_free_lb(0, s_gl);
      Eigen::Matrix<local_scalar_t__,-1,1> gl =
        Eigen::Matrix<local_scalar_t__,-1,1>::Constant(p5, DUMMY_VAR__);
      {
        std::vector<local_scalar_t__> gl_flat__;
        current_statement__ = 14;
        gl_flat__ = context__.vals_r("gl");
        current_statement__ = 14;
        pos__ = 1;
        current_statement__ = 14;
        for (int sym1__ = 1; sym1__ <= p5; ++sym1__) {
          current_statement__ = 14;
          stan::model::assign(gl, gl_flat__[(pos__ - 1)],
            "assigning variable gl", stan::model::index_uni(sym1__));
          current_statement__ = 14;
          pos__ = (pos__ + 1);
        }
      }
      out__.write(gl);
      local_scalar_t__ s_t = DUMMY_VAR__;
      current_statement__ = 15;
      s_t = context__.vals_r("s_t")[(1 - 1)];
      out__.write_free_lb(0, s_t);
      Eigen::Matrix<local_scalar_t__,-1,1> t =
        Eigen::Matrix<local_scalar_t__,-1,1>::Constant(p8, DUMMY_VAR__);
      {
        std::vector<local_scalar_t__> t_flat__;
        current_statement__ = 16;
        t_flat__ = context__.vals_r("t");
        current_statement__ = 16;
        pos__ = 1;
        current_statement__ = 16;
        for (int sym1__ = 1; sym1__ <= p8; ++sym1__) {
          current_statement__ = 16;
          stan::model::assign(t, t_flat__[(pos__ - 1)],
            "assigning variable t", stan::model::index_uni(sym1__));
          current_statement__ = 16;
          pos__ = (pos__ + 1);
        }
      }
      out__.write(t);
      local_scalar_t__ s_gt = DUMMY_VAR__;
      current_statement__ = 17;
      s_gt = context__.vals_r("s_gt")[(1 - 1)];
      out__.write_free_lb(0, s_gt);
      Eigen::Matrix<local_scalar_t__,-1,1> gt =
        Eigen::Matrix<local_scalar_t__,-1,1>::Constant(p9, DUMMY_VAR__);
      {
        std::vector<local_scalar_t__> gt_flat__;
        current_statement__ = 18;
        gt_flat__ = context__.vals_r("gt");
        current_statement__ = 18;
        pos__ = 1;
        current_statement__ = 18;
        for (int sym1__ = 1; sym1__ <= p9; ++sym1__) {
          current_statement__ = 18;
          stan::model::assign(gt, gt_flat__[(pos__ - 1)],
            "assigning variable gt", stan::model::index_uni(sym1__));
          current_statement__ = 18;
          pos__ = (pos__ + 1);
        }
      }
      out__.write(gt);
      std::vector<local_scalar_t__> y_gen =
        std::vector<local_scalar_t__>(n, DUMMY_VAR__);
      current_statement__ = 19;
      y_gen = context__.vals_r("y_gen");
      out__.write(y_gen);
    } catch (const std::exception& e) {
      stan::lang::rethrow_located(e, locations_array__[current_statement__]);
    }
  }
  inline void
  get_param_names(std::vector<std::string>& names__, const bool
                  emit_transformed_parameters__ = true, const bool
                  emit_generated_quantities__ = true) const {
    names__ = std::vector<std::string>{"s_sigma", "sigma", "s_mu", "mu",
                "s_r", "r", "s_b", "b", "s_g", "g", "s_l", "l", "s_gl", "gl",
                "s_t", "t", "s_gt", "gt", "y_gen"};
    if (emit_transformed_parameters__) {
      std::vector<std::string> temp{"expectation", "sigma_vec"};
      names__.reserve(names__.size() + temp.size());
      names__.insert(names__.end(), temp.begin(), temp.end());
    }
    if (emit_generated_quantities__) {
      std::vector<std::string> temp{"y_log_like"};
      names__.reserve(names__.size() + temp.size());
      names__.insert(names__.end(), temp.begin(), temp.end());
    }
  }
  inline void
  get_dims(std::vector<std::vector<size_t>>& dimss__, const bool
           emit_transformed_parameters__ = true, const bool
           emit_generated_quantities__ = true) const {
    dimss__ = std::vector<std::vector<size_t>>{std::vector<size_t>{},
                std::vector<size_t>{static_cast<size_t>(p4)},
                std::vector<size_t>{}, std::vector<size_t>{},
                std::vector<size_t>{},
                std::vector<size_t>{static_cast<size_t>(p1)},
                std::vector<size_t>{},
                std::vector<size_t>{static_cast<size_t>(p2)},
                std::vector<size_t>{},
                std::vector<size_t>{static_cast<size_t>(p3)},
                std::vector<size_t>{},
                std::vector<size_t>{static_cast<size_t>(p4)},
                std::vector<size_t>{},
                std::vector<size_t>{static_cast<size_t>(p5)},
                std::vector<size_t>{},
                std::vector<size_t>{static_cast<size_t>(p8)},
                std::vector<size_t>{},
                std::vector<size_t>{static_cast<size_t>(p9)},
                std::vector<size_t>{static_cast<size_t>(n)}};
    if (emit_transformed_parameters__) {
      std::vector<std::vector<size_t>>
        temp{std::vector<size_t>{static_cast<size_t>(n)},
             std::vector<size_t>{static_cast<size_t>(n)}};
      dimss__.reserve(dimss__.size() + temp.size());
      dimss__.insert(dimss__.end(), temp.begin(), temp.end());
    }
    if (emit_generated_quantities__) {
      std::vector<std::vector<size_t>>
        temp{std::vector<size_t>{static_cast<size_t>(n)}};
      dimss__.reserve(dimss__.size() + temp.size());
      dimss__.insert(dimss__.end(), temp.begin(), temp.end());
    }
  }
  inline void
  constrained_param_names(std::vector<std::string>& param_names__, bool
                          emit_transformed_parameters__ = true, bool
                          emit_generated_quantities__ = true) const final {
    param_names__.emplace_back(std::string() + "s_sigma");
    for (int sym1__ = 1; sym1__ <= p4; ++sym1__) {
      param_names__.emplace_back(std::string() + "sigma" + '.' +
        std::to_string(sym1__));
    }
    param_names__.emplace_back(std::string() + "s_mu");
    param_names__.emplace_back(std::string() + "mu");
    param_names__.emplace_back(std::string() + "s_r");
    for (int sym1__ = 1; sym1__ <= p1; ++sym1__) {
      param_names__.emplace_back(std::string() + "r" + '.' +
        std::to_string(sym1__));
    }
    param_names__.emplace_back(std::string() + "s_b");
    for (int sym1__ = 1; sym1__ <= p2; ++sym1__) {
      param_names__.emplace_back(std::string() + "b" + '.' +
        std::to_string(sym1__));
    }
    param_names__.emplace_back(std::string() + "s_g");
    for (int sym1__ = 1; sym1__ <= p3; ++sym1__) {
      param_names__.emplace_back(std::string() + "g" + '.' +
        std::to_string(sym1__));
    }
    param_names__.emplace_back(std::string() + "s_l");
    for (int sym1__ = 1; sym1__ <= p4; ++sym1__) {
      param_names__.emplace_back(std::string() + "l" + '.' +
        std::to_string(sym1__));
    }
    param_names__.emplace_back(std::string() + "s_gl");
    for (int sym1__ = 1; sym1__ <= p5; ++sym1__) {
      param_names__.emplace_back(std::string() + "gl" + '.' +
        std::to_string(sym1__));
    }
    param_names__.emplace_back(std::string() + "s_t");
    for (int sym1__ = 1; sym1__ <= p8; ++sym1__) {
      param_names__.emplace_back(std::string() + "t" + '.' +
        std::to_string(sym1__));
    }
    param_names__.emplace_back(std::string() + "s_gt");
    for (int sym1__ = 1; sym1__ <= p9; ++sym1__) {
      param_names__.emplace_back(std::string() + "gt" + '.' +
        std::to_string(sym1__));
    }
    for (int sym1__ = 1; sym1__ <= n; ++sym1__) {
      param_names__.emplace_back(std::string() + "y_gen" + '.' +
        std::to_string(sym1__));
    }
    if (emit_transformed_parameters__) {
      for (int sym1__ = 1; sym1__ <= n; ++sym1__) {
        param_names__.emplace_back(std::string() + "expectation" + '.' +
          std::to_string(sym1__));
      }
      for (int sym1__ = 1; sym1__ <= n; ++sym1__) {
        param_names__.emplace_back(std::string() + "sigma_vec" + '.' +
          std::to_string(sym1__));
      }
    }
    if (emit_generated_quantities__) {
      for (int sym1__ = 1; sym1__ <= n; ++sym1__) {
        param_names__.emplace_back(std::string() + "y_log_like" + '.' +
          std::to_string(sym1__));
      }
    }
  }
  inline void
  unconstrained_param_names(std::vector<std::string>& param_names__, bool
                            emit_transformed_parameters__ = true, bool
                            emit_generated_quantities__ = true) const final {
    param_names__.emplace_back(std::string() + "s_sigma");
    for (int sym1__ = 1; sym1__ <= p4; ++sym1__) {
      param_names__.emplace_back(std::string() + "sigma" + '.' +
        std::to_string(sym1__));
    }
    param_names__.emplace_back(std::string() + "s_mu");
    param_names__.emplace_back(std::string() + "mu");
    param_names__.emplace_back(std::string() + "s_r");
    for (int sym1__ = 1; sym1__ <= p1; ++sym1__) {
      param_names__.emplace_back(std::string() + "r" + '.' +
        std::to_string(sym1__));
    }
    param_names__.emplace_back(std::string() + "s_b");
    for (int sym1__ = 1; sym1__ <= p2; ++sym1__) {
      param_names__.emplace_back(std::string() + "b" + '.' +
        std::to_string(sym1__));
    }
    param_names__.emplace_back(std::string() + "s_g");
    for (int sym1__ = 1; sym1__ <= p3; ++sym1__) {
      param_names__.emplace_back(std::string() + "g" + '.' +
        std::to_string(sym1__));
    }
    param_names__.emplace_back(std::string() + "s_l");
    for (int sym1__ = 1; sym1__ <= p4; ++sym1__) {
      param_names__.emplace_back(std::string() + "l" + '.' +
        std::to_string(sym1__));
    }
    param_names__.emplace_back(std::string() + "s_gl");
    for (int sym1__ = 1; sym1__ <= p5; ++sym1__) {
      param_names__.emplace_back(std::string() + "gl" + '.' +
        std::to_string(sym1__));
    }
    param_names__.emplace_back(std::string() + "s_t");
    for (int sym1__ = 1; sym1__ <= p8; ++sym1__) {
      param_names__.emplace_back(std::string() + "t" + '.' +
        std::to_string(sym1__));
    }
    param_names__.emplace_back(std::string() + "s_gt");
    for (int sym1__ = 1; sym1__ <= p9; ++sym1__) {
      param_names__.emplace_back(std::string() + "gt" + '.' +
        std::to_string(sym1__));
    }
    for (int sym1__ = 1; sym1__ <= n; ++sym1__) {
      param_names__.emplace_back(std::string() + "y_gen" + '.' +
        std::to_string(sym1__));
    }
    if (emit_transformed_parameters__) {
      for (int sym1__ = 1; sym1__ <= n; ++sym1__) {
        param_names__.emplace_back(std::string() + "expectation" + '.' +
          std::to_string(sym1__));
      }
      for (int sym1__ = 1; sym1__ <= n; ++sym1__) {
        param_names__.emplace_back(std::string() + "sigma_vec" + '.' +
          std::to_string(sym1__));
      }
    }
    if (emit_generated_quantities__) {
      for (int sym1__ = 1; sym1__ <= n; ++sym1__) {
        param_names__.emplace_back(std::string() + "y_log_like" + '.' +
          std::to_string(sym1__));
      }
    }
  }
  inline std::string get_constrained_sizedtypes() const {
    return std::string("[{\"name\":\"s_sigma\",\"type\":{\"name\":\"real\"},\"block\":\"parameters\"},{\"name\":\"sigma\",\"type\":{\"name\":\"array\",\"length\":" + std::to_string(p4) + ",\"element_type\":{\"name\":\"real\"}},\"block\":\"parameters\"},{\"name\":\"s_mu\",\"type\":{\"name\":\"real\"},\"block\":\"parameters\"},{\"name\":\"mu\",\"type\":{\"name\":\"real\"},\"block\":\"parameters\"},{\"name\":\"s_r\",\"type\":{\"name\":\"real\"},\"block\":\"parameters\"},{\"name\":\"r\",\"type\":{\"name\":\"vector\",\"length\":" + std::to_string(p1) + "},\"block\":\"parameters\"},{\"name\":\"s_b\",\"type\":{\"name\":\"real\"},\"block\":\"parameters\"},{\"name\":\"b\",\"type\":{\"name\":\"vector\",\"length\":" + std::to_string(p2) + "},\"block\":\"parameters\"},{\"name\":\"s_g\",\"type\":{\"name\":\"real\"},\"block\":\"parameters\"},{\"name\":\"g\",\"type\":{\"name\":\"vector\",\"length\":" + std::to_string(p3) + "},\"block\":\"parameters\"},{\"name\":\"s_l\",\"type\":{\"name\":\"real\"},\"block\":\"parameters\"},{\"name\":\"l\",\"type\":{\"name\":\"vector\",\"length\":" + std::to_string(p4) + "},\"block\":\"parameters\"},{\"name\":\"s_gl\",\"type\":{\"name\":\"real\"},\"block\":\"parameters\"},{\"name\":\"gl\",\"type\":{\"name\":\"vector\",\"length\":" + std::to_string(p5) + "},\"block\":\"parameters\"},{\"name\":\"s_t\",\"type\":{\"name\":\"real\"},\"block\":\"parameters\"},{\"name\":\"t\",\"type\":{\"name\":\"vector\",\"length\":" + std::to_string(p8) + "},\"block\":\"parameters\"},{\"name\":\"s_gt\",\"type\":{\"name\":\"real\"},\"block\":\"parameters\"},{\"name\":\"gt\",\"type\":{\"name\":\"vector\",\"length\":" + std::to_string(p9) + "},\"block\":\"parameters\"},{\"name\":\"y_gen\",\"type\":{\"name\":\"array\",\"length\":" + std::to_string(n) + ",\"element_type\":{\"name\":\"real\"}},\"block\":\"parameters\"},{\"name\":\"expectation\",\"type\":{\"name\":\"vector\",\"length\":" + std::to_string(n) + "},\"block\":\"transformed_parameters\"},{\"name\":\"sigma_vec\",\"type\":{\"name\":\"vector\",\"length\":" + std::to_string(n) + "},\"block\":\"transformed_parameters\"},{\"name\":\"y_log_like\",\"type\":{\"name\":\"array\",\"length\":" + std::to_string(n) + ",\"element_type\":{\"name\":\"real\"}},\"block\":\"generated_quantities\"}]");
  }
  inline std::string get_unconstrained_sizedtypes() const {
    return std::string("[{\"name\":\"s_sigma\",\"type\":{\"name\":\"real\"},\"block\":\"parameters\"},{\"name\":\"sigma\",\"type\":{\"name\":\"array\",\"length\":" + std::to_string(p4) + ",\"element_type\":{\"name\":\"real\"}},\"block\":\"parameters\"},{\"name\":\"s_mu\",\"type\":{\"name\":\"real\"},\"block\":\"parameters\"},{\"name\":\"mu\",\"type\":{\"name\":\"real\"},\"block\":\"parameters\"},{\"name\":\"s_r\",\"type\":{\"name\":\"real\"},\"block\":\"parameters\"},{\"name\":\"r\",\"type\":{\"name\":\"vector\",\"length\":" + std::to_string(p1) + "},\"block\":\"parameters\"},{\"name\":\"s_b\",\"type\":{\"name\":\"real\"},\"block\":\"parameters\"},{\"name\":\"b\",\"type\":{\"name\":\"vector\",\"length\":" + std::to_string(p2) + "},\"block\":\"parameters\"},{\"name\":\"s_g\",\"type\":{\"name\":\"real\"},\"block\":\"parameters\"},{\"name\":\"g\",\"type\":{\"name\":\"vector\",\"length\":" + std::to_string(p3) + "},\"block\":\"parameters\"},{\"name\":\"s_l\",\"type\":{\"name\":\"real\"},\"block\":\"parameters\"},{\"name\":\"l\",\"type\":{\"name\":\"vector\",\"length\":" + std::to_string(p4) + "},\"block\":\"parameters\"},{\"name\":\"s_gl\",\"type\":{\"name\":\"real\"},\"block\":\"parameters\"},{\"name\":\"gl\",\"type\":{\"name\":\"vector\",\"length\":" + std::to_string(p5) + "},\"block\":\"parameters\"},{\"name\":\"s_t\",\"type\":{\"name\":\"real\"},\"block\":\"parameters\"},{\"name\":\"t\",\"type\":{\"name\":\"vector\",\"length\":" + std::to_string(p8) + "},\"block\":\"parameters\"},{\"name\":\"s_gt\",\"type\":{\"name\":\"real\"},\"block\":\"parameters\"},{\"name\":\"gt\",\"type\":{\"name\":\"vector\",\"length\":" + std::to_string(p9) + "},\"block\":\"parameters\"},{\"name\":\"y_gen\",\"type\":{\"name\":\"array\",\"length\":" + std::to_string(n) + ",\"element_type\":{\"name\":\"real\"}},\"block\":\"parameters\"},{\"name\":\"expectation\",\"type\":{\"name\":\"vector\",\"length\":" + std::to_string(n) + "},\"block\":\"transformed_parameters\"},{\"name\":\"sigma_vec\",\"type\":{\"name\":\"vector\",\"length\":" + std::to_string(n) + "},\"block\":\"transformed_parameters\"},{\"name\":\"y_log_like\",\"type\":{\"name\":\"array\",\"length\":" + std::to_string(n) + ",\"element_type\":{\"name\":\"real\"}},\"block\":\"generated_quantities\"}]");
  }
  // Begin method overload boilerplate
  template <typename RNG> inline void
  write_array(RNG& base_rng, Eigen::Matrix<double,-1,1>& params_r,
              Eigen::Matrix<double,-1,1>& vars, const bool
              emit_transformed_parameters = true, const bool
              emit_generated_quantities = true, std::ostream*
              pstream = nullptr) const {
    const size_t num_params__ = ((((((((((((((((((1 + p4) + 1) + 1) + 1) +
      p1) + 1) + p2) + 1) + p3) + 1) + p4) + 1) + p5) + 1) + p8) + 1) + p9) +
      n);
    const size_t num_transformed = emit_transformed_parameters * ((n + n));
    const size_t num_gen_quantities = emit_generated_quantities * (n);
    const size_t num_to_write = num_params__ + num_transformed +
      num_gen_quantities;
    std::vector<int> params_i;
    vars = Eigen::Matrix<double,-1,1>::Constant(num_to_write,
             std::numeric_limits<double>::quiet_NaN());
    write_array_impl(base_rng, params_r, params_i, vars,
      emit_transformed_parameters, emit_generated_quantities, pstream);
  }
  template <typename RNG> inline void
  write_array(RNG& base_rng, std::vector<double>& params_r, std::vector<int>&
              params_i, std::vector<double>& vars, bool
              emit_transformed_parameters = true, bool
              emit_generated_quantities = true, std::ostream*
              pstream = nullptr) const {
    const size_t num_params__ = ((((((((((((((((((1 + p4) + 1) + 1) + 1) +
      p1) + 1) + p2) + 1) + p3) + 1) + p4) + 1) + p5) + 1) + p8) + 1) + p9) +
      n);
    const size_t num_transformed = emit_transformed_parameters * ((n + n));
    const size_t num_gen_quantities = emit_generated_quantities * (n);
    const size_t num_to_write = num_params__ + num_transformed +
      num_gen_quantities;
    vars = std::vector<double>(num_to_write,
             std::numeric_limits<double>::quiet_NaN());
    write_array_impl(base_rng, params_r, params_i, vars,
      emit_transformed_parameters, emit_generated_quantities, pstream);
  }
  template <bool propto__, bool jacobian__, typename T_> inline T_
  log_prob(Eigen::Matrix<T_,-1,1>& params_r, std::ostream* pstream = nullptr) const {
    Eigen::Matrix<int,-1,1> params_i;
    return log_prob_impl<propto__, jacobian__>(params_r, params_i, pstream);
  }
  template <bool propto__, bool jacobian__, typename T_> inline T_
  log_prob(std::vector<T_>& params_r, std::vector<int>& params_i,
           std::ostream* pstream = nullptr) const {
    return log_prob_impl<propto__, jacobian__>(params_r, params_i, pstream);
  }
  inline void
  transform_inits(const stan::io::var_context& context,
                  Eigen::Matrix<double,-1,1>& params_r, std::ostream*
                  pstream = nullptr) const final {
    std::vector<double> params_r_vec(params_r.size());
    std::vector<int> params_i;
    transform_inits(context, params_i, params_r_vec, pstream);
    params_r = Eigen::Map<Eigen::Matrix<double,-1,1>>(params_r_vec.data(),
                 params_r_vec.size());
  }
  inline void
  transform_inits(const stan::io::var_context& context, std::vector<int>&
                  params_i, std::vector<double>& vars, std::ostream*
                  pstream__ = nullptr) const {
    vars.resize(num_params_r__);
    transform_inits_impl(context, vars, pstream__);
  }
  inline void
  unconstrain_array(const std::vector<double>& params_constrained,
                    std::vector<double>& params_unconstrained, std::ostream*
                    pstream = nullptr) const {
    const std::vector<int> params_i;
    params_unconstrained = std::vector<double>(num_params_r__,
                             std::numeric_limits<double>::quiet_NaN());
    unconstrain_array_impl(params_constrained, params_i,
      params_unconstrained, pstream);
  }
  inline void
  unconstrain_array(const Eigen::Matrix<double,-1,1>& params_constrained,
                    Eigen::Matrix<double,-1,1>& params_unconstrained,
                    std::ostream* pstream = nullptr) const {
    const std::vector<int> params_i;
    params_unconstrained = Eigen::Matrix<double,-1,1>::Constant(num_params_r__,
                             std::numeric_limits<double>::quiet_NaN());
    unconstrain_array_impl(params_constrained, params_i,
      params_unconstrained, pstream);
  }
};
}
using stan_model = model_IBD3_namespace::model_IBD3;
#ifndef USING_R
// Boilerplate
stan::model::model_base&
new_model(stan::io::var_context& data_context, unsigned int seed,
          std::ostream* msg_stream) {
  stan_model* m = new stan_model(data_context, seed, msg_stream);
  return *m;
}
stan::math::profile_map& get_stan_profile_data() {
  return model_IBD3_namespace::profiles__;
}
#endif
#endif
